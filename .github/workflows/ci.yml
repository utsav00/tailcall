name: build

on:
  push:
    branches:
      - "**"
  pull_request:
    branches: [main]
    types: [opened, reopened, synchronize]
jobs:
  test:
    name: Run tests
    if: (github.event_name == 'pull_request') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: llvm-cov
          args: --all-features --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: lcov.info
          fail_ci_if_error: true

  format:
    name: Run formatter and lint check
    if: (github.event_name == 'pull_request') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt, clippy

      - name: Format code
        uses: actions-rs/cargo@v1
        with:
          toolchain: nightly
          command: fmt
          args: -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          toolchain: nightly
          command: clippy
          args: --all-targets --all-features -- -D warnings

  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    needs: [test, format]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    concurrency:
      group: deploy-job
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  draft_release:
    name: Draft Release
    if: (github.event_name == 'pull_request') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout current branch (fast)
        uses: actions/checkout@v4

      - id: create_release
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-name: release-drafter.yml

      - name: Set output for later jobs
        id: set_output
        run: |
          echo "::set-output name=create_release_name::${{ steps.create_release.outputs.name }}"
          echo "::set-output name=create_release_id::${{ steps.create_release.outputs.id }}"
    outputs:
      create_release_name: ${{ steps.set_output.outputs.create_release_name }}
      create_release_id: ${{ steps.set_output.outputs.create_release_id }}

  release:
    name: Release
    needs: [test, format, draft_release]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build:
          [
            linux-x86_64-gnu,
            linux-x86_64-musl,
            linux-aarch64-gnu,
            linux-aarch64-musl,
            linux-i686-gnu,
            apple-arm64,
            apple-x86_64,
          ]
        include:
          - build: linux-x86_64-gnu
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            cross: false

          - build: linux-x86_64-musl
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            cross: true

          - build: linux-aarch64-gnu
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            cross: true

          - build: linux-aarch64-musl
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-musl
            cross: true

          - build: linux-i686-gnu
            os: ubuntu-latest
            rust: stable
            target: i686-unknown-linux-gnu
            cross: true

          - build: apple-arm64
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin

          - build: apple-x86_64
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            cross: false
    permissions:
      contents: write
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{secrets.GITHUBTOKEN}}

    steps:
      - name: Checkout current branch (fast)
        uses: actions/checkout@v4

      - name: Install correct toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          use-cross: ${{ matrix.cross }}
          override: true

      - name: build
        env:
          APP_VERSION: ${{ needs.draft_release.outputs.create_release_name }}
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Rename binary with target name
        run: mv target/${{ matrix.target }}/release/tailcall target/${{ matrix.target }}/release/tailcall-${{ matrix.target }}

      - name: Upload ${{ matrix.target }} Binary
        uses: xresloader/upload-to-github-release@v1
        with:
          release_id: ${{ needs.draft_release.outputs.create_release_id }}
          file: target/${{ matrix.target }}/release/tailcall-${{ matrix.target }}
          overwrite: true
